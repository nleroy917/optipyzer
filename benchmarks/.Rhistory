query = .mapFeatureToQeury(query, pList, feature)
}
query
query$feature
query
for(i in seq_along(query)) {
print(i)
}
for(i in seq_along(query)) {
print(query[i])
}
?length()
?lenght
?len
?length
query[123]
query[123]$start
start(query[123])
end(query[123])
end(query[123]) - start(query[123])
query[123]$feature
.nearestNeighbor(query, target) {
# calc distances
dist_to_prev <- start(query[target]) - end(query[target-1])
dist_to_next <- start(query[target+1]) - end(query[target])
if(dist_to_prev < dist_to_next) {
return (target-1)
} else if(dist_to_next < dist_to_prev) {
return (target+1)
} else {
# they are equidistant!!!
# TODO... handle this case
return (target-1)
}
}
.nearestNeighbor(query, target) {
# calc distances
dist_to_prev <- start(query[target]) - end(query[target-1])
dist_to_next <- start(query[target+1]) - end(query[target])
if(dist_to_prev < dist_to_next) {
return (target-1)
} else if(dist_to_next < dist_to_prev) {
return (target+1)
} else {
# they are equidistant!!!
# TODO... handle this case
return (target-1)
}
}
.nearestNeighbor(query, target) {
# calc distances
dist_to_prev <- start(query[target]) - end(query[target-1])
dist_to_next <- start(query[target+1]) - end(query[target])
if (dist_to_prev < dist_to_next) {
return (target-1)
} else if (dist_to_next < dist_to_prev) {
return (target+1)
} else {
# they are equidistant!!!
# TODO... handle this case
return (target-1)
}
}
.nearestNeighbor = function(query, target) {
# calc distances
dist_to_prev <- start(query[target]) - end(query[target-1])
dist_to_next <- start(query[target+1]) - end(query[target])
if (dist_to_prev < dist_to_next) {
return (target-1)
} else if (dist_to_next < dist_to_prev) {
return (target+1)
} else {
# they are equidistant!!!
# TODO... handle this case
return (target-1)
}
}
query$nearest_neighbor_type = "unknown"
for(i in seq_along(query)) {
if(i == 0) {
# nearest neighbor will be next
# genomic region
query[i]$nearest_neighbor_type = query[i+1]$feature
} else if(i == length(seq_along(query))) {
# we are at the end...
# nearest neighbor will be
# the previous region
query[i]$nearest_neighbor_type = query[i-1]$feature
} else {
# run normal calc
nearest_ind = .nearestNeighbor(query, i)
query[i]$nearest_neighbor_type = query[nearest_ind]$feature
}
}
for(i in seq_along(query)) {
if(i == 0) {
# nearest neighbor will be next
# genomic region
query[i]$nearest_neighbor_type = query[i+1]$feature
} else if(i == length(seq_along(query))) {
# we are at the end...
# nearest neighbor will be
# the previous region
query[i]$nearest_neighbor_type = query[i-1]$feature
} else {
# run normal calc
nearest_ind = .nearestNeighbor(query, i)
query[i]$nearest_neighbor_type = query[nearest_ind]$feature
}
}
for(i in seq_along(query)) {
if(i == 0) {
# nearest neighbor will be next
# genomic region
query[i]$nearest_neighbor_type = query[i+1]$feature
} else if(i == length(seq_along(query))) {
# we are at the end...
# nearest neighbor will be
# the previous region
query[i]$nearest_neighbor_type = query[i-1]$feature
} else {
# run normal calc
nearest_ind = .nearestNeighbor(query, i)
query[i]$nearest_neighbor_type = query[nearest_ind]$feature
}
}
devtools:load_all()
install.packages(devtools)
install.packages("devtools")
devtools::load_all()
swtwd("/Users/nathanleroy/Documents/uva/lab/code/GenomicDistributions
")
setwd("/Users/nathanleroy/Documents/uva/lab/code/GenomicDistributions")
devtools::load_all()
library(GenomicRanges)
queryFile = system.file("extdata", "vistaEnhancers.bed.gz", package="GenomicDistributions")
query = rtracklayer::import(queryFile)
data(TSS_hg19)
nearest(query, TSS_hg19)
TSS_hg19[neartes(query, TSS_hg19)]
TSS_hg19[nearest(query, TSS_hg19)]
length(TSS_hg19)
length(nearest(query, TSS_hg19))
length(query)
length(query)
TSS_hg19$gene_id
query$nearest_gene = TSS_hg19[nearest(query,TSS_hg19)]$gene_id
query
TSS_hg19$gene_biotype
query$nearest_gene_type = TSS_hg19[nearest(query,TSS_hg19)]$gene_biotype
query
nearestIds = nearest(query, TSS_hg19)
query$nearest_gene = TSS_hg19[nearestIds]
query
query$nearest_gene = TSS_hg19[nearestIds]$gene_id
query
query$nearest_distance = distance(query, TSS_hg19[nearestIds])
query
a = 5
a = 5
b = 3
print(a+b)
print(a+b)
getwd()
devtools::load_all(
)
devtools::load_all()
pwd()
print_wd()
install.packages("tinytex")
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::install_tinytex()
unlink("uva/fa2022/BIMS8030/week2/test_cache", recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages("tinytex", repos = "http://cran.us.r-project.org")
tinytex::install_tinytex()
install.packages("tinytex", repos = "http://cran.us.r-project.org")
knitr::opts_chunk$set(echo = TRUE)
install.packages("tinytex", repos = "http://cran.us.r-project.org")
tinytex::install_tinytex(force=TRUE)
printwd()
getwd()
# code provided
fifties <- c(4.78, 3.39, 3.62, 5.43, 4.16,
6.65, 4.34, 5.69, 6.18, 5.92,
5.87, 3.65, 4.37, 4.11, 4.22,
3.54, 5.59, 4.84, 5.74, 5.33,
4.99, 4.45, 4.22, 3.49, 4.94)
sixties <- c(4.65, 3.26, 3.70, 4.42, 3.71,
5.00, 3.78, 5.23, 5.32, 4.69,
5.80, 3.76, 4.51, 5.73, 4.02,
4.64, 4.23, 4.07, 5.83, 5.91,
3.76, 3.92, 3.38, 4.33, 5.21)
library(tidyverse)
library(infer)
chol <- tibble(fifties, sixties, diff = sixties-fifties)
glimpse(chol)
res <-
chol %>%
select(diff) %>%
t.test(conf.level=0.80)
res
# code provided
set.seed(8380)
chol2000 <- chol %>%
select(diff) %>%
rep_sample_n(size = 2000, replace = TRUE, reps = 1)
res <- t.test(chol2000)
res <- t.test(chol2000, conf.level=0.95)
res
chol
chol2000_ci <- res %>%
pull(conf_int())
chol2000_ci <- res$conf.int
View(chol2000)
res <- t.test(chol2000, conf.level=0.95)
chol2000_ci <- res$conf.int
lower <- chol2000_ci[1]
upper <- chol2000_ci[2]
chol %>%
filter(diff >= lower & differ <= upper)
chol %>%
filter(diff >= lower & diff <= upper)
chol %>%
filter(diff >= lower & diff <= upper)
filter(diff >= lower
chol %>%
filter(diff >= lower)
For questions 3 and 4, you do not need to run any R code. Please write your answers in prose in this Rmarkdown file.
chol %>%
filter(diff >= lower)
chol %>%
filter(diff >= lower & diff <= upper) %>%
nrow()
group_by(most_least_popular, type)
library(tidyverse)
artists <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-09-27/artists.csv')
artists_grouped <- artists %>%
filter(state =="Virginia") %>%
group_by(type) %>%
summarize(total=sum(artists_n, drop.na=TRUE)) %>%
drop_na(total)
artists_grouped
artists_grouped %>%
arrange(-total)
types_of_interest <- c("Designers", "Announcers")
most_least_popular <- artists %>%
filter(
type %in% types_of_interest & state == "Virginia"
)
most_least_popular
most_least_popular %>%
ggplot(aes(reorder(race, -artists_n), fill=race, artists_n)) +
geom_col() +
facet_wrap(~type) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust=1)) +
labs(x="Race", y="Total Artists")
most_least_popular %>%
mutate(artists_norm = artists_n/sum(group_by(most_least_popular, type)))
group_by(most_least_popular, type)
group_by(most_least_popular, type) %>%
summarize(tot_artists = sum(artists_n))
group_by(most_least_popular, type) %>%
summarize(tot_artists = sum(artists_n)) %>%
pull(tot_artists)
totals <- most_least_popular %>%
group_by(type) %>%
summarize(tot_artists = sum(artists_n)) %>%
pull(tot_artists)
totals <- most_least_popular %>%
group_by(type) %>%
summarize(tot_artists = sum(artists_n)) %>%
arrange(-tot_artists) %>%
pull(tot_artists)
totals
tot_designers <- totals[1]
tot_announcers <- totals[2]
most_least_popular %>%
mutate(
tot_artists_norm = if_else(
type=="Designers", tot_artists/tot_designers, tot_artists/tot_announcers
)
)
most_least_popular %>%
mutate(
tot_artists_norm = if_else(
type=="Designers", artists_n/tot_designers, artists_n/tot_announcers
)
)
most_least_popular %>%
mutate(
artists_n_norm = if_else(
type=="Designers", artists_n/tot_designers, artists_n/tot_announcers
)
)
most_least_popular %>%
mutate(
artists_n_norm = if_else(
type=="Designers", artists_n/tot_designers, artists_n/tot_announcers
)
) %>%
pull(artists_n_norm)
most_least_popular_norm <- most_least_popular %>%
mutate(
artists_n_norm = if_else(
type=="Designers", artists_n/tot_designers, artists_n/tot_announcers
)
) %>%
pull(artists_n_norm)
most_least_popular_norm <- most_least_popular %>%
mutate(
artists_n_norm = if_else(
type=="Designers", artists_n/tot_designers, artists_n/tot_announcers
)
)
geom_col()
most_least_popular_norm %>%
ggplot(aes(reorder(race, -artists_n_norm), artists_n_norm)) +
geom_col()
most_least_popular_norm %>%
ggplot(aes(reorder(race, -artists_n_norm), artists_n_norm)) +
geom_col() +
facet_wrap(~type)
most_least_popular_norm %>%
ggplot(aes(reorder(race, -artists_n_norm), artists_n_norm)) +
geom_col() +
facet_wrap(~type) +
theme_classic()
most_least_popular_norm %>%
ggplot(aes(reorder(race, -artists_n_norm), artists_n_norm), fill=race) +
geom_col() +
facet_wrap(~type) +
theme_classic()
most_least_popular_norm %>%
ggplot(aes(reorder(race, -artists_n_norm), artists_n_norm), fill=race) +
geom_col() +
facet_wrap(~type) +
theme_classic()
most_least_popular_norm %>%
ggplot(aes(reorder(race, -artists_n_norm), artists_n_norm,  fill=race)) +
geom_col() +
facet_wrap(~type) +
theme_classic()
most_least_popular_norm %>%
ggplot(aes(reorder(race, -artists_n_norm), artists_n_norm, fill=race)) +
geom_col() +
facet_wrap(~type) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust=1)) +
labs(x="Race", y="Total Artists")
library(tidyverse)
library(infer)
# code provided
fifties <- c(4.78, 3.39, 3.62, 5.43, 4.16,
6.65, 4.34, 5.69, 6.18, 5.92,
5.87, 3.65, 4.37, 4.11, 4.22,
3.54, 5.59, 4.84, 5.74, 5.33,
4.99, 4.45, 4.22, 3.49, 4.94)
sixties <- c(4.65, 3.26, 3.70, 4.42, 3.71,
5.00, 3.78, 5.23, 5.32, 4.69,
5.80, 3.76, 4.51, 5.73, 4.02,
4.64, 4.23, 4.07, 5.83, 5.91,
3.76, 3.92, 3.38, 4.33, 5.21)
chol <- tibble(fifties, sixties, diff = sixties-fifties)
glimpse(chol)
res <-
chol %>%
select(diff) %>%
t.test(conf.level=0.80)
res
We are 80% confident that the true difference in cholesterol in our population is between -0.4741 and -0.0578 mmol/L.
res
res <-
chol %>%
select(diff) %>%
t.test(conf.level=0.95)
res
# code provided
set.seed(8380)
chol2000 <- chol %>%
select(diff) %>%
rep_sample_n(size = 2000, replace = TRUE, reps = 1)
res <- t.test(chol2000$diff, conf.level=0.95)
chol2000_ci <- res$conf.int
chol2000_ci
lower <- chol2000_ci[1]
upper <- chol2000_ci[2]
chol2000 %>%
filter(diff >= lower & diff <= upper)
chol2000 %>%
filter(diff >= lower & diff <= upper) %>%
nrow()
# install.packages("pwr")
# install.packages("NHANES")
library(pwr)
library(tidyverse)
library(broom)
library(NHANES)
set.seed(8380)
nh_diabetes <- NHANES %>%
filter(Diabetes == "Yes") %>%
sample_n(30)
nh_no_diabetes <- NHANES %>%
filter(Diabetes == "No") %>%
sample_n(30)
nh <- bind_rows(nh_diabetes, nh_no_diabetes) %>%
select(BMI, Diabetes, Age)
library(tidyverse)
library(infer)
(mut_mean-wt_mean)/sd_pool
mut_mean <- 0.161
sd_pool <- 0.036
(mut_mean-wt_mean)/sd_pool
wt_mean <- 0.106
(mut_mean-wt_mean)/sd_pool
0.75/2.25
pwr.t.test(n=(5+7), d=0.8)
pwr.t2n.test(n1=5, n2=7, sig.level=0.05, d=0.8)
pwr.t2n.test(n1=5, n2=7, sig.level=0.05, d=1.53)
pwr.t2n.test(
n1=50,
n2=70,
sig.level=0.05,
d=1.53
)
pwr.t2n.test(
n1=10,
n2=14,
sig.level=0.05,
d=1.53
)
pwr.t2n.test(
n1=5,
n2=7,
sig.level=0.05,
d=1.53
)
pwr.t2n.test(
n1=10,
n2=7,
sig.level=0.05,
d=1.53
)
pwr.t2n.test(
n1=10,
n2=10,
sig.level=0.05,
d=1.53
)
pwr.t2n.test(
n1=4,
n2=16,
sig.level=0.05,
d=1.53
)
pwr.t2n.test(
n1=2,
n2=18,
sig.level=0.05,
d=1.53
)
setwd("~/projects.nosync/optipyzer/benchmarks")
library(tidyverse)
gc <- read_csv("results/pairwise_gc_content.csv")
gc_melted <- reshape2::melt(gc, id.vars='id')
gc_melted
gc
gc_melted <- gc %>%
select(idt_gc, optipyzer_gc) %>%
reshape2::melt(gc, id.vars='id')
gc_melted <- gc %>%
select(idt_gc, optipyzer_gc, id) %>%
reshape2::melt(gc, id.vars='id')
gc_melted <- gc %>%
select(idt_gc, optipyzer_gc, id) %>%
reshape2::melt(gc, id.vars='id')
gc_melted <- gc %>%
select(idt_gc, optipyzer_gc, id) %>%
reshape2::melt(gc, id.vars='id')
gc_melted <- gc %>%
select(idt_gc, optipyzer_gc, id)
gc_melted
gc_melted <- gc %>%
select(idt_gc, optipyzer_gc, id) %>%
reshape2::melt(id.vars='id')
gc_melted
gc_melted %>%
ggplot(aes(x=id, y=value, color=variable)) +
geom_col()
gc_melted %>%
ggplot(aes(x=id, y=value, fill=variable)) +
geom_col()
gc_melted %>%
ggplot(aes(x=id, y=value, fill=variable)) +
geom_bar(stat='identity', position='dodge')
gc_melted %>%
ggplot(aes(x=id, y=value, fill=variable)) +
geom_bar(stat='identity', position='dodge') +
theme_classic()
gc_melted %>%
ggplot(aes(x=id, y=value, fill=variable)) +
geom_bar(stat='identity', position='dodge') +
theme_classic() +
labs(x="Protein", "GC-Content")
gc_melted %>%
ggplot(aes(x=id, y=value, fill=variable)) +
geom_bar(stat='identity', position='dodge') +
theme_classic() +
labs(x="Protein", "GC-Content") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
